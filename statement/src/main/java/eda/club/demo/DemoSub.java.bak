package eda.club.demo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.listener.SessionAwareMessageListener;
import org.springframework.stereotype.Service;
import org.springframework.messaging.MessageHeaders;
import java.util.Iterator;

import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;

@Service
public class DemoSub {

    Logger logger = LoggerFactory.getLogger(DemoSub.class);


    @Value("${club.jms.topic.transReplyTopic}")
    private String transReplyTopicTemplate;
    

    @Autowired
    private JmsTemplate jmsTemplate;

    //@JmsListener(destination = "${club.jms.queue.sessionCheckPending}", containerFactory = "cFactory")
    public void processMsg(Message msg, Session session) throws JMSException {
        StringBuffer msgAsStr = new StringBuffer("============= Received \nHeaders:");
        /*
        MessageHeaders hdrs = msg.getHeaders();
        msgAsStr.append("\nUUID: "+hdrs.getId());
        msgAsStr.append("\nTimestamp: "+hdrs.getTimestamp());
        Iterator<String> keyIter = hdrs.keySet().iterator();
        while (keyIter.hasNext()) {
            String key = keyIter.next();
            msgAsStr.append("\n"+key+": "+hdrs.get(key));
        }*/
        TextMessage msgBody =  (TextMessage)msg;
        logger.info(msgBody.getText());
        TextMessage responseMessage = session.createTextMessage("Hello response");
        responseMessage.setJMSCorrelationID(msg.getJMSCorrelationID());
     
        if (msg.getStringProperty("action") != null &&  msg.getStringProperty("instanceId") != null
            ||  msg.getStringProperty("sessionId") != null ||  msg.getStringProperty("sessionId") != null) {
            String replyTo = String.format(transReplyTopicTemplate, msg.getStringProperty("action"), msg.getStringProperty("instanceId"), msg.getStringProperty("sessionId"), msg.getStringProperty("acctNo") );
            //final MessageProducer producer = session.createProducer(session.createQueue(replyTo));
            //producer.send(responseMessage);
          
            this.jmsTemplate.convertAndSend(replyTo, responseMessage);
            logger.info("about to reply message=" + "Hello response" + " to topic=" + replyTo);
            logger.info(msg.getJMSCorrelationID());
        }
        return;
        
    }

}
 